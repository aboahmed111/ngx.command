{"version":3,"sources":["command.ts"],"names":[],"mappings":"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","file":"command.js","sourcesContent":["import { Observable } from \"rxjs/Observable\";\r\nimport { Subscription } from \"rxjs/Subscription\";\r\nimport { Subject } from \"rxjs/Subject\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\nexport interface ICommand {\r\n\t/**\r\n\t * Determines whether the command is currently executing.\r\n\t */\r\n\tisExecuting: boolean;\r\n\tisExecuting$?: Observable<boolean>;\r\n\t/**\r\n\t * Determines whether the command can execute or not.\r\n\t */\r\n\tcanExecute: boolean;\r\n\tcanExecute$?: Observable<boolean>;\r\n\t/**\r\n\t * Execute function to invoke.\r\n\t */\r\n\texecute(): void;\r\n\t/**\r\n\t * Disposes all resources held by subscriptions.\r\n\t */\r\n\tdestroy(): void;\r\n}\r\n\r\n\r\n/**\r\n * Command object used to encapsulate information which is needed to perform an action.\r\n *\r\n * @export\r\n * @class Command\r\n * @implements {ICommand}\r\n */\r\nexport class Command implements ICommand {\r\n\r\n\tisExecuting = false;\r\n\tisExecuting$ = new BehaviorSubject<boolean>(false);\r\n\tcanExecute = true;\r\n\tcanExecute$: Observable<boolean>;\r\n\r\n\tprivate executionPipe$ = new Subject<{}>();\r\n\tprivate isExecuting$$: Subscription;\r\n\tprivate canExecute$$: Subscription;\r\n\tprivate executionPipe$$: Subscription;\r\n\r\n\t/**\r\n\t * Creates an instance of Command.\r\n\t *\r\n\t * @param {(() => any)} execute Execute function to invoke - use `isAsync: true` when {Observable<any>}.\r\n\t * @param {Observable<boolean>} [canExecute] Observable which determines whether it can execute or not.\r\n\t * @param {boolean} [isAsync] Indicates that the execute function is async e.g. Observable.\r\n\t */\r\n\tconstructor(\r\n\t\texecute: () => any,\r\n\t\tcanExecute$?: Observable<boolean>,\r\n\t\tisAsync?: boolean\r\n\t) {\r\n\t\tif (canExecute$) {\r\n\t\t\tthis.canExecute$ = Observable.combineLatest(\r\n\t\t\t\tthis.isExecuting$,\r\n\t\t\t\tcanExecute$\r\n\t\t\t\t, (isExecuting, canExecuteResult) => {\r\n\t\t\t\t\t// console.log(\"[command::combineLatest$] update!\", { isExecuting, canExecuteResult });\r\n\t\t\t\t\tthis.isExecuting = isExecuting;\r\n\t\t\t\t\tthis.canExecute = !isExecuting && canExecuteResult;\r\n\t\t\t\t\treturn this.canExecute;\r\n\t\t\t\t});\r\n\t\t\tthis.canExecute$$ = this.canExecute$.subscribe();\r\n\t\t} else {\r\n\t\t\tthis.canExecute$ = this.isExecuting$.map(x => {\r\n\t\t\t\tconst canExecute = !x;\r\n\t\t\t\tthis.canExecute = canExecute;\r\n\t\t\t\treturn canExecute;\r\n\t\t\t});\r\n\t\t\tthis.isExecuting$$ = this.isExecuting$\r\n\t\t\t\t.do(x => this.isExecuting = x)\r\n\t\t\t\t.subscribe();\r\n\t\t}\r\n\t\tthis.buildExecutionPipe(execute, isAsync);\r\n\t}\r\n\r\n\texecute() {\r\n\t\tthis.executionPipe$.next({});\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tif (this.executionPipe$$) {\r\n\t\t\tthis.executionPipe$$.unsubscribe();\r\n\t\t}\r\n\t\tif (this.canExecute$$) {\r\n\t\t\tthis.canExecute$$.unsubscribe();\r\n\t\t}\r\n\t\tif (this.isExecuting$$) {\r\n\t\t\tthis.isExecuting$$.unsubscribe();\r\n\t\t}\r\n\t\tif (this.isExecuting$) {\r\n\t\t\tthis.isExecuting$.complete();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate buildExecutionPipe(execute: () => any, isAsync?: boolean) {\r\n\t\tlet pipe$ = this.executionPipe$\r\n\t\t\t.filter(() => this.canExecute)\r\n\t\t\t.do(() => {\r\n\t\t\t\t// console.log(\"[command::excutionPipe$] do#1 - set execute\");\r\n\t\t\t\tthis.isExecuting$.next(true);\r\n\t\t\t});\r\n\r\n\t\tpipe$ = isAsync\r\n\t\t\t? pipe$.switchMap(() => execute())\r\n\t\t\t: pipe$.do(() => execute());\r\n\r\n\t\tpipe$ = pipe$\r\n\t\t\t.do(() => {\r\n\t\t\t\t// console.log(\"[command::excutionPipe$] do#2 - set idle\");\r\n\t\t\t\tthis.isExecuting$.next(false);\r\n\t\t\t},\r\n\t\t\t() => {\r\n\t\t\t\t// console.log(\"[command::excutionPipe$] do#2 error - set idle\");\r\n\t\t\t\tthis.isExecuting$.next(false);\r\n\t\t\t});\r\n\t\tthis.executionPipe$$ = pipe$.subscribe();\r\n\t}\r\n\r\n}"]}